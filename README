# VideosDB

## About

Object Oriented Programming Course

November 2021

https://ocw.cs.pub.ro/courses/poo-ca-cd/teme/tema

Student: Ilie Dana Maria, 324CA

## Run tests

Class Main
    * runs checker on implementation
    * runs checkstyle

Class Test#main with the name of the input file
    * runs the solution on the input from input file
    * writes result to the out.txt file
    

## Implementation

The Solver#solve is the primary method of the implementation as it manages the
input and returns a JSONArray with the result of all actions. Based on the
input, a database containing all the users, movies, tv shows, actors and actions
is created. For each action, a new JSONObject with the result is added to the
JSONArray.

### Commands flow

To add a video to a user's list of favorite videos, I search for the user in
the database, then check if the user has seen the video. If he has, the video
is added to the list and the number of times that particular video has been
added to a favorites list is incremented.

For the view command, if the user has already seen the video, the number of
times the user has seen the video is incremented, otherwise the video is
seen for the first time and therefore added to the user's view history.

When rating a video, the type of video (movie or tv show) is considered, as
a tv show has its every season rated, unlike a movie that has a single rating.
To avoid having a user rate a video multiple times, each user has a list of
movies rated and a map(key = tv show, value = list of seasons rated) of tv shows rated.

### Queries flow

For actors and videos queries, previous filtering of the actors or videos is
required. In order to do that, Query#filterActors and Query#filterVideo methods
are used. After the filtering part, the actors and videos are sorted by the 
specified criteria. The sorting is made using the sorting methods from the
Sorter class in package "sort".

For users queries, there is no need for previous filtering. 

### Recommendations flow

A standard recommendation searches in the database and returns the first unseen video by the user.

A best unseen recommendation searches in the database and returns the best
video unseen by the user. In order to do that, the videos are sorted by rating
in a descending order, then the first unseen video is returned.

A popular recommendation returns the first unseen video by the user in the most
popular genre. In order to do that, the popularity of each genre is calculated,
then the genres are sorted by the popularity in descending order.

A favourite recommendation returns the most added to favourites list video unseen
by the user. To do that, the number of times each video was added to a list of
favourite videos is calculated, then the videos are sorted by that number in
descending order.

A search recommendation returns all the videos unseen by the user in specific
genre. First, the videos are filtered by that genre, then are sorted by rating
in ascending order.

